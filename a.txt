git init ->intialised repo
git add <filename>->added file
U->untracked
A->added
git commit
git config --global user.name "Saptarshi"
git config credential.helper store
git config --unset credential.helper
git log
git status
git diff -> shows changes in repo
git log --all --decorate --graph --oneline
git branch ->new branch
git switch ->change branch
git -am "message"->add and commit(otherwise we need to add and commit separately everytime)
git branch
git remote add origin https://github.com/Mastermind-sap/Opensource.git
git remote -v
git push origin <branch name>
git config --global http.proxy
git config --global http.proxy http://172.16.199.20:8080
git config --global --unset http.proxy
git config --global https.proxy http://172.16.199.40:8080
git branch --delete <branchname>
 git clean -f -x ->To remove all untracked files, whether they are ignored or not
// git config global file found in 	C:\Users\username\.gitconfig
git reset --hard ->reset all changes that were not committed
git commit --amend --no-edit -> to edit a small change like typo in the last commit without changing the commit msg or commit
git checkout --<filename> ->restore deleted file in local storage from git(i.e. when you run rm file)
git rm <filename> ->untrack a file(i.e. remove it from git)
git reset HEAD <filename> ->reset file to the version in HEAD but in git to get the file again in the working directory use git checkout
get reset HEAD~<number of commits to undo>
difference between revert and reset is that reset is used when it is not pushed to remote repo on github and revert is used when it has been pushed
git revert --no-edit HEAD
git checkout --orphan <NEWBRANCH name> -> https://gist.github.com/ozh/4734410 - create a branch from clean slate without using any source

=================================================================================================================

// GIT is not authorizing so we can impersonate anyone but to push on GitHub we need write access
To impersonate anyone we just need to sign the commit author with his email
git config --global user.email <email> //this is checked most and the commiter is shown according to the email
git config --global user.name "name"

Therefore important to verify and sign with keys
https://www.youtube.com/watch?v=uhy_ojFqLg0


git cat-file -p <commit -hash>  // to see the sign,authors commiters etc


https://www.theodinproject.com/lessons/foundations-setting-up-git
ssh-keygen -t ed25519
git config --global gpg.format ssh
git config --global user.signingkey /PATH/TO/.SSH/KEY.PUB
git config --global commit.gpgsign true
git log --show-signature

https://medium.com/@nikhi.unni/fixing-no-signature-issue-in-git-signed-commits-e86d7ece9fb2#:~:text=When%20verifying%20Git%20signed%20commits,appropriate%20SSH%20key%20for%20verification.

still have no idea why ssh ed25519 is not signing
====================================================================================
